{"version":3,"sources":["webpack:///./src/module.js","webpack:///./src/directive.js","webpack:///./src/index.js"],"names":["module","angular","directive","$timeout","$q","$log","restrict","require","scope","created","options","link","element","attrs","ngModel","htmlElement","copy","createInstance","api","$on","eventName","callback","wrappedCallback","get","on","off","extendApi","noUiSlider","create","$watch","newCallback","isFunction","setCreatedWatcher","newOptions","oldOptions","equals","updateOptions","setOptionsWatcher","$render","set","$modelValue","positions","$setViewValue","bindNgModelControls","resolve","isArray","isNumber","Error","concat","then","start","catch","error","moduleName"],"mappings":"qHAGaA,EAASC,IAAQD,OADJ,aACuB,qBCCjDA,EAAOE,UAAU,aAAjB,wBAA+B,SAACC,EAAUC,EAAIC,GAAf,MAAyB,CACtDC,SAAU,KACVC,QAAS,WACTC,MAAO,CACLC,QAAS,kBACTC,QAAS,mBAEXC,KAAM,SAACH,EAAOI,EAASC,EAAOC,GAC5B,IAAMC,EAAcH,EAAQ,GACxBF,EAAUT,IAAQe,KAAKR,EAAME,SA8GjC,SAASO,IACP,IAAMC,EAtGR,SAAmBA,GAejB,OAdAA,EAAIC,IAAM,SAACC,EAAWC,GACpB,IAAMC,EAAkB,WACtBnB,EAAS,WACPkB,EAASH,EAAIK,UAMjB,OAFAL,EAAIM,GAAGJ,EAAWE,GAEX,WACLJ,EAAIO,IAAIL,EAAWE,KAIhBJ,EAuFKQ,CAAUC,IAAWC,OAAOb,EAAaL,KA9EvD,SAA2BQ,GACzBV,EAAMqB,OAAO,UAAW,SAACC,GAClB7B,IAAQ8B,WAAWD,IAIxBA,EAAY,CAAEZ,UA0EhBc,CAAkBd,GA7DpB,SAA2BA,GACzBV,EAAMqB,OAAO,UAAW,SAACI,EAAYC,GAC/BjC,IAAQkC,OAAOF,EAAYC,KAI/BxB,EAAUT,IAAQe,KAAKR,EAAME,SAE7BQ,EAAIkB,cAAc1B,MAsDpB2B,CAAkBnB,GAEF,OAAZJ,GA7CN,SAA6BI,GAC3BJ,EAAQwB,QAAU,WAChBpB,EAAIqB,IAAIzB,EAAQ0B,cAGlBtB,EAAIM,GAAG,SAAU,WACf,IAAMiB,EAAYvB,EAAIK,MACtBT,EAAQ4B,cAAcD,KAuCtBE,CAAoBzB,IAzBN,OAAZJ,EACKV,EAAGwC,QAAQ,MAGbxC,EAAG,SAACwC,GACTzC,EAAS,WACP,IAAMF,IAAQ4C,QAAQ/B,EAAQ0B,eAAgBvC,IAAQ6C,SAAShC,EAAQ0B,aACrE,MAAM,IAAIO,MAAJ,wHAAAC,OAAmIlC,EAAQ0B,cAGnJI,EAAQ9B,EAAQ0B,kBAqBnBS,KAAK,SAACT,GACe,OAAhBA,IAEF9B,EAAQwC,MAAQV,GAIlBvB,MAEDkC,MAAM9C,EAAK+C,YC9IHC,UFDW","file":"angularjs-nouislider.a921da6fa4dad77ecd25.js","sourcesContent":["import angular from 'angular';\n\nexport const moduleName = 'noUiSlider';\nexport const module = angular.module(moduleName, []);\n","import angular from 'angular';\nimport noUiSlider from 'nouislider';\nimport { module } from './module';\n\nmodule.directive('noUiSlider', ($timeout, $q, $log) => ({\n  restrict: 'AE',\n  require: '?ngModel',\n  scope: {\n    created: '&?sliderCreated',\n    options: '=?sliderOptions',\n  },\n  link: (scope, element, attrs, ngModel) => {\n    const htmlElement = element[0];\n    let options = angular.copy(scope.options);\n\n    /**\n     * Extends the API returned by noUiSlider with the `$on` function which wraps the `on` function\n     * to use Angular.\n     *\n     * @param {Object} api The API instance returned by the `noUiSlider.create()` method\n     * @return {Object} The API instance with the added `$on` function\n     */\n    function extendApi(api) {\n      api.$on = (eventName, callback) => {\n        const wrappedCallback = () => {\n          $timeout(() => {\n            callback(api.get());\n          });\n        };\n\n        api.on(eventName, wrappedCallback);\n\n        return () => {\n          api.off(eventName, wrappedCallback);\n        };\n      };\n\n      return api;\n    }\n\n    /**\n     * Creates a watcher that calls the function given by the `slider-created` directive attribute.\n     * The watcher fires every time the `slider-created` function changes.\n     *\n     * @param {Object} api The API instance returned by the `noUiSlider.create()` method\n     */\n    function setCreatedWatcher(api) {\n      scope.$watch('created', (newCallback) => {\n        if (!angular.isFunction(newCallback)) {\n          return;\n        }\n\n        newCallback({ api });\n      });\n    }\n\n    /**\n     * Creates a watcher that looks for changes in the `slider-options` directive attribute. When a\n     * change is detected the options for the noUiSlider instance are updated. Note that only the\n     * 'margin', 'limit', 'step', 'range', 'animate' and 'snap' options can be updated this way (as\n     * documented in https://refreshless.com/nouislider/more/#section-update). All other option\n     * updates require you to destroy the current instance and create a new one.\n     *\n     * @param {Object} api The API instance returned by the `noUiSlider.create()` method\n     */\n    function setOptionsWatcher(api) {\n      scope.$watch('options', (newOptions, oldOptions) => {\n        if (angular.equals(newOptions, oldOptions)) {\n          return;\n        }\n\n        options = angular.copy(scope.options);\n\n        api.updateOptions(options);\n      });\n    }\n\n    /**\n     * Add ngModel controls to the directive. This allows the use of ngModel to set and get the\n     * value in the slider. It uses the noUiSlider API's get and set functions, so no custom\n     * formatters need to be defined for ngModel. The ngModelOptions can be used.\n     *\n     * @param {Object} api The API instance returned by the `noUiSlider.create()` method\n     */\n    function bindNgModelControls(api) {\n      ngModel.$render = () => {\n        api.set(ngModel.$modelValue);\n      };\n\n      api.on('update', () => {\n        const positions = api.get();\n        ngModel.$setViewValue(positions);\n      });\n    }\n\n    /**\n     * A utility function that returns a promise which resolves when ngModel is correctly loaded,\n     * using $timeout.\n     *\n     * @return {Promise} Returns a promise that resolves with `null` when ngModel is null and thus\n     * not in use. If the value entered for ngModel is not an array or number, an error is thrown\n     * and thus the promise rejects. If the value entered for ngModel is correct, the promise\n     * resolves with this value.\n     */\n    function initializeNgModel() {\n      if (ngModel === null) {\n        return $q.resolve(null);\n      }\n\n      return $q((resolve) => {\n        $timeout(() => {\n          if (!(angular.isArray(ngModel.$modelValue) || angular.isNumber(ngModel.$modelValue))) {\n            throw new Error(`Value provided in ngModel is not a valid noUislider start position. Expected a Number or an Array of Numbers, found: ${ ngModel.$modelValue }`);\n          }\n\n          resolve(ngModel.$modelValue);\n        });\n      });\n    }\n\n    /**\n     * Creates a noUiSlider instance.\n     */\n    function createInstance() {\n      const api = extendApi(noUiSlider.create(htmlElement, options));\n\n      setCreatedWatcher(api);\n      setOptionsWatcher(api);\n\n      if (ngModel !== null) {\n        bindNgModelControls(api);\n      }\n    }\n\n    // Wait for ngModel to be initialized\n    initializeNgModel()\n      .then(($modelValue) => {\n        if ($modelValue !== null) {\n          // If ngModel is being used, (over)write the start option for the noUiSlider options\n          options.start = $modelValue;\n        }\n\n        // Create a noUiSlider instance\n        createInstance();\n      })\n      .catch($log.error);\n  },\n}));\n","import { moduleName } from './module';\nimport './directive';\n\nexport default moduleName;\n"],"sourceRoot":""}